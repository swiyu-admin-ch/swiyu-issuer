openapi: 3.1.0
info:
  version: 1.0.0
  title: Issuer Service API
  description: Generic swiyu Issuer Service service
servers:
  - url: http://localhost:8080
    description: Generated server url
tags:
  - name: Credential Metadata API
    description: "Provide metadata related to verifiable credentials, including credential\
    \ type metadata, JSON schemas, and Overlays Capture Architecture (OCA) data. (IF-110)"
  - name: Issuer OID4VCI API
    description: "Public OpenID for Verifiable Credential Issuance (OID4VCI) API endpoints,\
    \ including issuing OAuth tokens for credential requests, issuing verifiable credentials,\
    \ and supporting deferred credential issuance (IF-111)"
  - name: Status List API
    description: Exposes API endpoints for managing status lists used in verifiable
      credential status tracking. Supports creating and initializing new status lists
      and retrieving status list information by ID. Ensures status list configuration
      is immutable after initialization. (IF-113)
  - name: Credential API
    description: "Exposes API endpoints for managing credential offers and their statuses.\
    \ Supports creating new credential offers, retrieving offer data and deeplinks,\
    \ and updating or querying the status of offers and issued verifiable credentials.\
    \ (IF-114)"
  - name: Well-known endpoints API
    description: "Exposes OpenID .well-known endpoints for issuer configuration and\
    \ credential metadata as required by the OID4VCI specification. Provides endpoints\
    \ for OpenID Connect issuer configuration, OAuth authorization server information,\
    \ and issuer metadata describing supported verifiable credentials (IF-112)"
  - name: Actuator
    description: Monitor and interact
    externalDocs:
      description: Spring Boot Actuator Web API Documentation
      url: https://docs.spring.io/spring-boot/docs/current/actuator-api/html/
paths:
  /oid4vci/api/token:
    post:
      tags:
        - Issuer OID4VCI API
      summary: Submit form data
      operationId: oauthAccessToken
      requestBody:
        description: Form data to be submitted
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/OauthAccessTokenRequest"
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OAuthToken"
  /oid4vci/api/nonce:
    post:
      tags:
        - Issuer OID4VCI API
      summary: Provide a self-contained nonce in a publicly accessible endpoint.
      description: |
        Provide nonces for proof of possessions in a manner not requiring the service to save it.
        The nonce should be used only once. The nonce has a (very) limit lifetime.
        The response should not be cached.
        For more information see <a href="https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#section-7.2">OID4VCI Nonce Endpoint specification</a>
      operationId: createNonce
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/NonceResponse"
  /oid4vci/api/deferred_credential:
    post:
      tags:
        - Issuer OID4VCI API
      summary: Collect credential associated with the bearer token and the transaction
        id. This endpoint is used for deferred issuance.
      description: Issues a credential for a deferred transaction. Requires a valid
        bearer token and transaction details in the request body.
      operationId: createDeferredCredential
      parameters:
        - name: Authorization
          in: header
          description: Bearer token for authentication
          required: true
          schema:
            type: string
        - name: SWIYU-API-Version
          in: header
          description: "Optional API version, set to '2' for v2 requests"
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeferredCredentialEndpointRequest"
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: Credential issued successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/CredentialEndpointResponse"
                  - $ref: "#/components/schemas/CredentialEndpointResponseV2"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                type: string
            application/jwt:
              schema:
                type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
            application/jwt:
              schema:
                type: string
      security:
        - bearer-jwt: [ ]
  /oid4vci/api/credential:
    post:
      tags:
        - Issuer OID4VCI API
      summary: Collect credential associated with the bearer token with the requested
        credential properties.
      description: Issues a credential for a given bearer token and credential request.
        Supports API versioning via SWIYU-API-Version header. Returns the issued credential
        in JSON or JWT format.
      operationId: createCredential
      parameters:
        - name: Authorization
          in: header
          description: "Bearer token for authentication. Format: 'Bearer ..."
          required: true
          schema:
            type: string
        - name: SWIYU-API-Version
          in: header
          description: "Optional API version, set to '2' for v2 requests"
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CredentialEndpointRequest"
                - $ref: "#/components/schemas/CredentialEndpointRequestV2"
          application/jwt:
            schema:
              type: string
              description: |
                An encoded JWT as described in RFC7519, with the claims as found in the unencrypted request
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: Credential issued successfully.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/CredentialEndpointResponse"
                  - $ref: "#/components/schemas/CredentialEndpointResponseV2"
        "202":
          description: Successful deferred credential. The credential will be issued
            later
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/DeferredData"
                  - $ref: "#/components/schemas/DeferredDataV2"
      security:
        - bearer-jwt: [ ]
  /management/api/status-list:
    post:
      tags:
        - Status List API
      summary: Create and initialize a new status list.
      description: "Initialize and link a status list slot to to this service. This\
        \ process can be only done once per status list! Status List type, configuration\
        \ or length can not be changed after initialization!"
      operationId: createStatusList
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatusListCreate"
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/StatusList"
  /management/api/credentials:
    post:
      tags:
        - Credential API
      summary: Create a generic credential offer with the given content
      description: |
        Create a new credential offer, which can the be collected by the holder.
        The returned deep link has to be provided to the holder via an other channel, for example as QR-Code.
        The credentialSubjectData can be a json object or a JWT, if the signer has been configured to perform data integrity checks.
        Returns both the ID used to interact with the offer and later issued VC, and the deep link to be provided to
      operationId: createCredential_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCredentialOfferRequest"
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: Credential offer created
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CredentialWithDeeplinkResponse"
        "400":
          description: |
            Bad request due to user content or internal call to external service like statuslist
          content:
            '*/*':
              schema:
                type: string
  /management/api/credentials/{credentialId}:
    get:
      tags:
        - Credential API
      summary: "Get the offer data, if any is still cached"
      operationId: getCredentialInformation
      parameters:
        - name: credentialId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "404":
          description: Not Found
        "200":
          description: Credential offer found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CredentialInfoResponse"
    patch:
      tags:
        - Credential API
      summary: Update the status of an offer or the verifiable credential associated
        with the id. This is only for deferred flows. The status is set to ready for
        issuance
      operationId: updateCredentialForDeferredFlow
      parameters:
        - name: credentialId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: { }
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: Credential status updated
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UpdateStatusResponse"
        "400":
          description: Bad request due to user content or internal call to external
            service like statuslist
          content:
            '*/*':
              schema:
                type: string
  /management/api/credentials/{credentialId}/status:
    get:
      tags:
        - Credential API
      summary: "Get the current status of an offer or the verifiable credential, if\
        \ already issued."
      operationId: getCredentialStatus
      parameters:
        - name: credentialId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/StatusResponse"
    patch:
      tags:
        - Credential API
      summary: Set the status of an offer or the verifiable credential associated
        with the id.
      operationId: updateCredentialStatus
      parameters:
        - name: credentialId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: credentialStatus
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/UpdateCredentialStatusRequestType"
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UpdateStatusResponse"
  /oid4vci/vct/{metadataKey}:
    get:
      tags:
        - Credential Metadata API
      operationId: getCredentialTypeMetadata
      parameters:
        - name: metadataKey
          in: path
          required: true
          schema:
            type: string
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /oid4vci/oca/{ocaKey}:
    get:
      tags:
        - Credential Metadata API
      operationId: getOverlaysCaptureArchitecture
      parameters:
        - name: ocaKey
          in: path
          required: true
          schema:
            type: string
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /oid4vci/json-schema/{schemaKey}:
    get:
      tags:
        - Credential Metadata API
      operationId: getJsonSchema
      parameters:
        - name: schemaKey
          in: path
          required: true
          schema:
            type: string
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            application/schema+json:
              schema:
                type: string
  /oid4vci/.well-known/openid-credential-issuer:
    get:
      tags:
        - Well-known endpoints API
      summary: Information about credentials which can be issued.
      operationId: getIssuerMetadata
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/IssuerMetadata"
  /.well-known/openid-credential-issuer:
    get:
      tags:
        - Well-known endpoints API
      summary: Information about credentials which can be issued.
      operationId: getIssuerMetadata_1
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/IssuerMetadata"
  /.well-known/openid-configuration:
    get:
      tags:
        - Well-known endpoints API
      summary: OpenID Connect information required for issuing VCs
      operationId: getOpenIDConfiguration
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OpenIdConfiguration"
  /oid4vci/.well-known/openid-configuration:
    get:
      tags:
        - Well-known endpoints API
      summary: OpenID Connect information required for issuing VCs
      operationId: getOpenIDConfiguration_1
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OpenIdConfiguration"
  /.well-known/oauth-authorization-server:
    get:
      tags:
        - Well-known endpoints API
      summary: OpenID Connect information required for issuing VCs
      operationId: getOpenIDConfigurationForOauthAuthServer
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OpenIdConfiguration"
  /oid4vci/.well-known/oauth-authorization-server:
    get:
      tags:
        - Well-known endpoints API
      summary: OpenID Connect information required for issuing VCs
      operationId: getOpenIDConfigurationForOauthAuthServer_1
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OpenIdConfiguration"
  /management/api/status-list/{statusListId}:
    get:
      tags:
        - Status List API
      summary: Get the status information of a status list.
      operationId: getStatusListInformation
      parameters:
        - name: statusListId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/StatusList"
  /management/api/credentials/{credentialId}/offer_deeplink:
    get:
      tags:
        - Credential API
      operationId: getCredentialOfferDeeplink
      parameters:
        - name: credentialId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
      deprecated: true
  /actuator:
    get:
      tags:
        - Actuator
      summary: Actuator root web endpoint
      operationId: links
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/Link"
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/Link"
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/Link"
  /actuator/prometheus:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'prometheus'
      operationId: scrape
      parameters:
        - name: format
          in: query
          schema:
            type: string
            enum:
              - CONTENT_TYPE_004
              - CONTENT_TYPE_OPENMETRICS_100
              - CONTENT_TYPE_PROTOBUF
        - name: includedNames
          in: query
          schema:
            type: string
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            text/plain;version=0.0.4;charset=utf-8:
              schema:
                type: object
            application/openmetrics-text;version=1.0.0;charset=utf-8:
              schema:
                type: object
            application/vnd.google.protobuf;proto=io.prometheus.client.MetricFamily;encoding=delimited:
              schema:
                type: object
  /actuator/info:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'info'
      operationId: info
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actuator/health:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'health'
      operationId: health
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
components:
  schemas:
    OauthAccessTokenRequest:
      type: object
      properties:
        grant_type:
          type: string
          default: urn:ietf:params:oauth:grant-type:pre-authorized_code
          description: The type of grant being requested. Must be 'urn:ietf:params:oauth:grant-type:pre-authorized_code'.
          minLength: 1
        pre-authorized_code:
          type: string
          minLength: 1
      required:
        - grant_type
        - pre-authorized_code
    OAuthToken:
      type: object
      properties:
        refresh_token:
          type: string
        token_type:
          type: string
        scope:
          type: string
        access_token:
          type: string
        expires_in:
          type: integer
          format: int64
        c_nonce:
          type: string
      required:
        - access_token
    NonceResponse:
      type: object
      properties:
        c_nonce:
          type: string
          description: String containing an unpredictable challenge to be used when
            creating a proof of possession of the key.
      required:
        - c_nonce
    CredentialEndpointResponse:
      type: object
      properties:
        format:
          type: string
        credential:
          type: string
        transaction_id:
          type: string
          format: uuid
    CredentialEndpointResponseV2:
      type: object
      properties:
        credentials:
          type: array
          items:
            $ref: "#/components/schemas/CredentialObjectDtoV2"
        transaction_id:
          type: string
        interval:
          type: integer
          format: int64
    CredentialObjectDtoV2:
      type: object
      properties:
        credential:
          type: string
          description: |
            One sdjwt credential as string, if multiple credentials are issued each is wrapped in
            a separate CredentialObjectDtoV2 object.
    DeferredCredentialEndpointRequest:
      type: object
      description: Request to the deferred credential endpoint.
      properties:
        transaction_id:
          type: string
          format: uuid
          description: Id received from the create credential request for the deferred
            flow.
      required:
        - transaction_id
    CredentialEndpointRequest:
      type: object
      description: Request to the Credential Endpoint as defined in OID4VCI draft
        13 specification
      properties:
        format:
          type: string
          pattern: ^vc\+sd-jwt$
        proof:
          type: object
          additionalProperties: { }
          description: Proof for holder binding. Can be in key:did or cnf format.
        credential_response_encryption:
          $ref: "#/components/schemas/CredentialResponseEncryption"
      required:
        - format
    CredentialResponseEncryption:
      type: object
      properties:
        jwk:
          type: object
          additionalProperties: { }
        alg:
          type: string
        enc:
          type: string
      required:
        - alg
        - enc
        - jwk
    CredentialEndpointRequestV2:
      type: object
      description: Request to the Credential Endpoint as defined in OID4VCI 1.0 specification
      properties:
        credential_configuration_id:
          type: string
          description: |
            String that uniquely identifies one of the keys in the name/value pairs stored in
            the credential_configurations_supported Credential Issuer metadata
          example: university_example_sd_jwt
          minLength: 1
        proofs:
          $ref: "#/components/schemas/ProofsDto"
          description: |
            Optional object providing 1+ proof of possessions of the cryptographic key material to
            which the issued Credential instances will be bound to
          example:
            jwt:
              - eyJ0eXAiOiJvcGVuaWQ0dmNpLXByb29mK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6IkVDIiwidXNlIjoic2lnIiwiY3J2IjoiUC0yNTYiLCJraWQiOiJUZXN0LUtleSIsIngiOiJrdHFJRFpoUjFmY2NlM3VGanpxdDdLRVlEdVdweFJoX3pqdkszanZsS2k4IiwieSI6Ik1UV2ZObTJ6dy1CbklqM2szbW0xZVB3Q3hqTm9DSEowdXN6V25MeHVDemsiLCJpYXQiOjE3NTMyNjkyNzZ9fQ.eyJhdWQiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvb2lkNHZjaSIsIm5vbmNlIjoiY2U5YzEzNzgtODc2Yi00OGUyLTg0ZmUtOGE0ZjUwZGFkZmJmIiwiaWF0IjoxNzUzMjY5Mjc2fQ.ck-6Oq6IAav1VdFOkq9Qh7tzrl52jJvFBU3aPcZ_20oE73Cf4izN0ECmmiJm_qUMvYJlykQFsX2sW43gFC6vCw
        credential_response_encryption:
          $ref: "#/components/schemas/CredentialResponseEncryption"
          description: |
            Optional object providing information how to encrypt the Credential Response, if present.
          example: |
            {
               "alg": "ECDH-ES+A128KW",
               "enc": "A128CBC-HS256",
               "jwk": {"kty":"EC","crv":"P-256","kid":"transportEncKeyEC","x":"DTaouFJpyVkLvfhoOvuTDR6_nmTt7YTvEHsHzK0Ingk","y":"vOipfo61Sy64XpneRyR5g6NCGXLv_Q7f3-kEDMT-G9U"
            }
      required:
        - credential_configuration_id
    ProofsDto:
      type: object
      properties:
        jwt:
          type: array
          description: |
            ProofsDto represents the proofs object in the OID4VCI Credential Request.
          example: jwt
          items:
            type: string
          minItems: 1
      required:
        - jwt
    DeferredData:
      type: object
      properties:
        transaction_id:
          type: string
          format: uuid
      required:
        - transaction_id
    DeferredDataV2:
      type: object
      properties:
        transaction_id:
          type: string
          format: uuid
        interval:
          type: integer
          format: int32
      required:
        - interval
        - transaction_id
    ConfigurationOverride:
      type: object
      description: Override for configuration to be use for the created entity
      properties:
        issuer_did:
          type: string
          description: Override to be used in place of the ISSUER_ID
        verification_method:
          type: string
          description: "Override for the verification method that is looked up in\
            \ the did document during verification of the entity. Most often the full\
            \ did and a unique id after #"
        key_id:
          type: string
          description: ID of the key in the HSM
        key_pin:
          type: string
          description: "The pin which protects the key in the hsm, if any. Note that\
            \ this only the key pin, not hsm password or partition pin."
    StatusListCreate:
      type: object
      properties:
        type:
          type: string
          description: Technical type of the status list to be used. This influences
            the options available in config.
          enum:
            - TOKEN_STATUS_LIST
        maxLength:
          type: integer
          format: int32
          description: How many status entries can be part of the status list. The
            memory size of the status list is depending on the type and the config
            of the status list.
          example: 100000
          minimum: 1
        config:
          $ref: "#/components/schemas/StatusListCreateConfig"
          description: |2
                 Additional config parameters, depending on the status list type. For Example
                 {"bits": 2}
                 for token status list with revocation & suspension
                 {"purpose": "suspension"}
                 for a bit string status list for suspension
          example:
            bits: 2
        configuration_override:
          $ref: "#/components/schemas/ConfigurationOverride"
          description: "Optional Parameter to override configured parameters, such\
            \ as the DID used or the HSM key used in singing the request object"
      required:
        - config
        - maxLength
        - type
    StatusListCreateConfig:
      type: object
      properties:
        purpose:
          type: string
        bits:
          type: integer
          format: int32
          description: "The number of bits used per Referenced Token. More bits allow\
            \ additional states. 1 bit is only revocation, 2 bits is revocation and\
            \ suspension of a credential. Possible values are 1, 2, 4, 8."
          example: 2
      required:
        - bits
    StatusList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Id of the status list used by the business issuer.
        statusRegistryUrl:
          type: string
          description: URI of the status list used by registry.
        type:
          type: string
          description: Technical type of the status list to be used. This influences
            the options available in config.
          enum:
            - TOKEN_STATUS_LIST
        maxListEntries:
          type: integer
          format: int32
          description: How many status entries can be part of the status list. The
            memory size of the status list is depending on the type and the config
            of the status list.
          example: 100000
        remainingListEntries:
          type: integer
          format: int32
          description: How many status entries are not used in the  status list.
          example: 12
        nextFreeIndex:
          type: integer
          format: int32
          description: Shows which is the next free status entry that can be used
        version:
          type: string
          description: Version of the status list schema
        config:
          type: object
          additionalProperties: { }
          description: |2
                 Additional config parameters, depending on the status list type. For Example
                 {"bits": 2}
                 for token status list with revocation & suspension
                 {"purpose": "suspension"}
                 for a bit string status list for suspension
          example:
            bits: 2
    CredentialWithDeeplinkResponse:
      type: object
      properties:
        management_id:
          type: string
          format: uuid
        offer_deeplink:
          type: string
    CreateCredentialOfferRequest:
      type: object
      description: Initial credential creation request to start the offering process.
      properties:
        metadata_credential_supported_id:
          type: array
          items:
            type: string
          minItems: 1
        credential_subject_data:
          description: |2
                The user data to be written in the verifiable credential. Can be a json object or a JWT.
                credentialSubjectData": {"lastName": "Example","firstName": "Edward"}
                When using data integrity JWT the value are as claims inside the JWT.
                "credentialSubjectData": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsYXN0TmFtZSI6IkV4YW1wbGUiLCJmaXJzdE5hbWUiOiJFZHdhcmQiLCJkYXRlT2ZCaXJ0aCI6IjEuMS4xOTcwIn0.2VMjj1RpJ7jUjn1SJHDwwzqx3kygn88UxSsG5j1uXG8"
          example:
            lastName: Example
            firstName: Edward
        credential_metadata:
          $ref: "#/components/schemas/CredentialOfferMetadataDto"
          description: |
            Various metadata to be used for credential creation.
          example:
            vct#integrity: sha256-0000000000000000000000000000000000000000000=
            deferred: false
        offer_validity_seconds:
          type: integer
          format: int32
          description: how long the offer should be usable in seconds. Example is
            1 Day.
          example: 86400
        deferred_offer_validity_seconds:
          type: integer
          format: int32
          description: how long the offer should be valid after it reached the deferred
            state in seconds. Example is 7 Days.
          example: 604800
        credential_valid_until:
          type: string
          format: date-time
          description: Setting for until when the VC shall be valid. XMLSchema dateTimeStamp
            https://www.w3.org/TR/xmlschema11-2/#dateTimeStamp
          example: 2010-01-01T19:23:24Z
        credential_valid_from:
          type: string
          format: date-time
          description: Setting for from when the VC shall be valid. XMLSchema dateTimeStamp
            https://www.w3.org/TR/xmlschema11-2/#dateTimeStamp
          example: 2010-01-01T18:23:24Z
        status_lists:
          type: array
          items:
            type: string
        configuration_override:
          $ref: "#/components/schemas/ConfigurationOverride"
          description: "Optional Parameter to override configured parameters, such\
            \ as the DID used or the HSM key used in singing the request object"
      required:
        - credential_subject_data
        - metadata_credential_supported_id
    CredentialOfferMetadataDto:
      type: object
      properties:
        deferred:
          type: boolean
        vct#integrity:
          type: string
          maxLength: 2147483647
          minLength: 1
        vct_metadata_uri:
          type: string
          maxLength: 2147483647
          minLength: 1
        vct_metadata_uri#integrity:
          type: string
          maxLength: 2147483647
          minLength: 1
    CredentialStatusType:
      type: string
      description: |2
            Status for the full lifecycle of a verifiable credential.
            OFFERED - an offer link has been created, and not yet redeemed by a holder.
            CANCELLED - the VC was revoked before being claimed.
            IN_PROGRESS - very short lived state, if the Holder has redeemed the one-time-code, but not yet gotten their credential. To allow a holder to retry fetching the vc set the state to offered.
            DEFERRED - the offer has been used and all necessary data from the wallet has been received but the credential is not yet issued. To use this state the credential metadata entry has to have deferred set to true.
            READY - Status set by the business issuer to continue the issuance of the credential for the deferred flow.
            ISSUED - the VC has been collected by the holder and is valid.
            SUSPENDED - the VC has been temporarily suspended. To unsuspend change state to issued.
            REVOKED - the VC has been revoked. This state is final and can not be changed.
            EXPIRED - the lifetime of the VC expired (not used yet)
      enum:
        - OFFERED
        - CANCELLED
        - IN_PROGRESS
        - DEFERRED
        - READY
        - ISSUED
        - SUSPENDED
        - REVOKED
        - EXPIRED
      example: SUSPENDED
    UpdateStatusResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          $ref: "#/components/schemas/CredentialStatusType"
    UpdateCredentialStatusRequestType:
      type: string
      description: |2
            Status for the full lifecycle of a verifiable credential.
            CANCELLED - the VC was revoked before being claimed.
            READY - Status set by the business issuer to continue the issuance of the credential for the deferred flow
            SUSPENDED - the VC has been temporarily suspended. To unsuspend change state to issued.
            REVOKED - the VC has been revoked. This state is final and can not be changed.
      enum:
        - CANCELLED
        - READY
        - ISSUED
        - SUSPENDED
        - REVOKED
      example: SUSPENDED
    BatchCredentialIssuance:
      type: object
      properties:
        batch_size:
          type: integer
          format: int32
          minimum: 2
      required:
        - batch_size
    CredentialClaim:
      type: object
      properties:
        mandatory:
          type: boolean
        value_type:
          type: string
        display:
          type: array
          items:
            $ref: "#/components/schemas/MetadataDisplayInfo"
    CredentialConfiguration:
      type: object
      properties:
        format:
          type: string
          pattern: ^vc\+sd-jwt$
        vct:
          type: string
        claims:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/CredentialClaim"
          deprecated: true
        credential_definition:
          $ref: "#/components/schemas/CredentialDefinition"
        cryptographic_binding_methods_supported:
          type: array
          items:
            type: string
            pattern: ^(did:)?jwk$
        credential_signing_alg_values_supported:
          type: array
          items:
            type: string
            pattern: ^ES256$
        proof_types_supported:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/SupportedProofType"
        display:
          type: array
          deprecated: true
          items:
            $ref: "#/components/schemas/MetadataCredentialDisplayInfo"
        credential_metadata:
          $ref: "#/components/schemas/CredentialConfigurationMetadata"
      required:
        - format
        - vct
    CredentialConfigurationMetadata:
      type: object
      description: |
        Object containing information relevant to the usage and display of issued Credentials.
        Credential Format-specific mechanisms can overwrite the information in this object to convey
        Credential metadata. Format-specific mechanisms, such as SD-JWT VC display metadata are always
        preferred by the Wallet over the information in this object, which serves as the default fallback.
      properties:
        display:
          type: array
          items:
            $ref: "#/components/schemas/MetadataCredentialDisplayInfo"
        claims:
          type: array
          items:
            $ref: "#/components/schemas/MetadataClaimDescriptor"
    CredentialDefinition:
      type: object
      properties:
        type:
          type: array
          items:
            type: string
        credentialSubject:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/CredentialClaim"
        mandatoryClaims:
          type: array
          items:
            type: string
        '@context':
          type: array
          items:
            type: string
      required:
        - type
    IssuerCredentialRequestEncryption:
      type: object
      properties:
        enc_values_supported:
          type: array
          description: List of supported JWE encryption algorithms
          items:
            type: string
            pattern: ^A128GCM$
          minItems: 1
        zip_values_supported:
          type: array
          description: If present must be a non-empty array of JWE compression algorithms
          items:
            type: string
        encryption_required:
          type: boolean
          description: Boolean value specifying whether the Credential Issuer requires
            the additional encryption on top of TLS
        jwks:
          type: object
          additionalProperties: { }
          description: "A JSON Web Key Set that contains one or more public keys,\
            \ to be used by the Wallet as an input to a key agreement for encryption\
            \ of the Credential Request."
          example:
            keys:
              - kty: EC
                crv: P-256
                kid: ec91e148-974d-47f1-9891-4b89d8bad57c
                x: rm2YkWAJ2V84gS00DqeGR6MXHgW3FWISG45Vop0cWv4
                "y": ktSScp7s2fWSdq_7c6iOUI9AYFwQahXG60Nr9SL68mY
      required:
        - enc_values_supported
        - encryption_required
    IssuerCredentialResponseEncryption:
      type: object
      properties:
        enc_values_supported:
          type: array
          description: List of supported JWE encryption algorithms
          items:
            type: string
            pattern: ^A128GCM$
          minItems: 1
        zip_values_supported:
          type: array
          description: If present must be a non-empty array of JWE compression algorithms
          items:
            type: string
        encryption_required:
          type: boolean
          description: Boolean value specifying whether the Credential Issuer requires
            the additional encryption on top of TLS
        alg_values_supported:
          type: array
          items:
            type: string
            pattern: ^ECDH-ES$
          minItems: 1
      required:
        - alg_values_supported
        - enc_values_supported
        - encryption_required
    IssuerMetadata:
      type: object
      description: |
        The OID4VCI Credential Issuer Metadata contains information on the Credential Issuer's technical capabilities,
        supported Credentials, and (internationalized) display information.
      properties:
        credential_issuer:
          type: string
          description: The Credential Issuer's identifier
        authorization_servers:
          type: array
          items:
            type: string
        credential_endpoint:
          type: string
          description: |
            Information for the holder where to get the credential.
          pattern: ^.+/credential$
        nonce_endpoint:
          type: string
          description: |
            Nonce for proof of possessions. Required for VCs to be bound to a holder.
          pattern: ^.+/nonce$
        deferred_credential_endpoint:
          type: string
        notification_endpoint:
          type: string
          maxLength: 0
          minLength: 0
        credential_configurations_supported:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/CredentialConfiguration"
        credential_request_encryption:
          $ref: "#/components/schemas/IssuerCredentialRequestEncryption"
          description: Object containing information about whether the Credential
            Issuer supports encryption of the Credential Request on top of TLS.
        credential_response_encryption:
          $ref: "#/components/schemas/IssuerCredentialResponseEncryption"
          description: Object containing information about whether the Credential
            Issuer supports encryption of the Credential Response on top of TLS.
        batch_credential_issuance:
          $ref: "#/components/schemas/BatchCredentialIssuance"
        version:
          type: string
          pattern: ^1\.0$
        display:
          type: array
          description: "Array of objects, where each object contains display properties\
            \ of a Credential Issuer for a certain language"
          items:
            $ref: "#/components/schemas/MetadataIssuerDisplayInfo"
      required:
        - credential_configurations_supported
        - credential_endpoint
        - credential_issuer
        - version
    KeyAttestationRequirement:
      type: object
      properties:
        key_storage:
          type: array
          items:
            type: string
            enum:
              - iso_18045_high
              - iso_18045_enhanced-basic
      required:
        - key_storage
    MetadataClaimDescriptor:
      type: object
      description: |
        A claims description object as used in the Credential Issuer metadata is an object used to describe
        how a certain claim in the Credential is displayed to the End-User.
      properties:
        path:
          type: string
        mandatory:
          type: boolean
        display:
          type: array
          items:
            $ref: "#/components/schemas/MetadataDisplayInfo"
      required:
        - path
    MetadataCredentialDisplayInfo:
      type: object
      properties:
        locale:
          type: string
          description: |
            String value that identifies the language of this object represented as a language tag taken
            from values defined in BCP47 [RFC5646]. There MUST be only one object for each language identifier.
          example: de-CH
        name:
          type: string
        logo:
          $ref: "#/components/schemas/MetadataLogo"
          description: Object with information about the logo of the Credential.
        description:
          type: string
        background_color:
          type: string
          description: |-
            String value of a background color of the Credential represented as numerical color values defined
            in CSS Color Module Level 3
        background_image:
          $ref: "#/components/schemas/MetadataImage"
          description: |
            Object with information about the background image of the Credential. At least the following parameter
        text_color:
          type: string
    MetadataDisplayInfo:
      type: object
      properties:
        locale:
          type: string
          description: |
            String value that identifies the language of this object represented as a language tag taken
            from values defined in BCP47 [RFC5646]. There MUST be only one object for each language identifier.
          example: de-CH
        name:
          type: string
    MetadataImage:
      type: object
      properties:
        uri:
          type: string
          description: |-
            tring value that contains a URI where the Wallet can obtain the logo of the Credential Issuer.
            The Wallet needs to determine the scheme, since the URI value could use the https: scheme, the data: scheme, etc.
      required:
        - uri
    MetadataIssuerDisplayInfo:
      type: object
      properties:
        locale:
          type: string
          description: |
            String value that identifies the language of this object represented as a language tag taken
            from values defined in BCP47 [RFC5646]. There MUST be only one object for each language identifier.
          example: de-CH
        name:
          type: string
        logo:
          $ref: "#/components/schemas/MetadataLogo"
          description: Object with information about the logo of the Credential Issuer.
    MetadataLogo:
      type: object
      properties:
        uri:
          type: string
          description: |-
            tring value that contains a URI where the Wallet can obtain the logo of the Credential Issuer.
            The Wallet needs to determine the scheme, since the URI value could use the https: scheme, the data: scheme, etc.
        alt_text:
          type: string
          description: String value of the alternative text for the logo image
      required:
        - uri
    SupportedProofType:
      type: object
      properties:
        proof_signing_alg_values_supported:
          type: array
          items:
            type: string
            pattern: ^ES256$
        key_attestations_required:
          $ref: "#/components/schemas/KeyAttestationRequirement"
    OpenIdConfiguration:
      type: object
      properties:
        issuer:
          type: string
        token_endpoint:
          type: string
    ClientAgentInfoDto:
      type: object
      properties:
        remoteAddr:
          type: string
        user-agent:
          type: string
        accept-language:
          type: string
        accept-encoding:
          type: string
    CredentialInfoResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/CredentialStatusType"
        metadata_credential_supported_id:
          type: array
          items:
            type: string
        credential_metadata:
          $ref: "#/components/schemas/CredentialOfferMetadataDto"
        holder_jwks:
          type: array
          items:
            type: string
        key_attestations:
          type: array
          items:
            type: string
        client_agent_info:
          $ref: "#/components/schemas/ClientAgentInfoDto"
        offer_expiration_timestamp:
          type: integer
          format: int64
        deferred_offer_expiration_seconds:
          type: integer
          format: int32
        credential_valid_from:
          type: string
          format: date-time
        credential_valid_until:
          type: string
          format: date-time
        credential_request:
          $ref: "#/components/schemas/CredentialEndpointRequest"
        offer_deeplink:
          type: string
    StatusResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/CredentialStatusType"
    Link:
      type: object
      properties:
        href:
          type: string
        templated:
          type: boolean
    ApiError:
      description: Error response object
      properties:
        error:
          type: string
        error_description:
          type: string
        detail:
          type: string
        trace_id:
          type: string
    WebhookCallback:
      description: Callback transmitting information about an event which occurred.
      properties:
        subject_id:
          type: string
          format: uuid
        event_type:
          type: string
          enum:
            - VC_STATUS_CHANGED
            - VC_DEFERRED
            - ISSUANCE_ERROR
        event:
          type: string
        event_description:
          type: string
        timestamp:
          type: string
          format: date-time
  securitySchemes:
    bearer-jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
