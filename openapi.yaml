openapi: 3.0.1
info:
  title: Issuer Service API
  description: Generic swiyu Issuer Service service
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Credential Metadata API
  description: "Provide metadata related to verifiable credentials, including credential\
    \ type metadata, JSON schemas, and Overlays Capture Architecture (OCA) data. (IF-110)"
- name: Issuer OID4VCI API
  description: "Public OpenID for Verifiable Credential Issuance (OID4VCI) API endpoints,\
    \ including issuing OAuth tokens for credential requests, issuing verifiable credentials,\
    \ and supporting deferred credential issuance (IF-111)"
- name: Status List API
  description: Exposes API endpoints for managing status lists used in verifiable
    credential status tracking. Supports creating and initializing new status lists
    and retrieving status list information by ID. Ensures status list configuration
    is immutable after initialization. (IF-113)
- name: Credential API
  description: "Exposes API endpoints for managing credential offers and their statuses.\
    \ Supports creating new credential offers, retrieving offer data and deeplinks,\
    \ and updating or querying the status of offers and issued verifiable credentials.\
    \ (IF-114)"
- name: Well-known endpoints API
  description: "Exposes OpenID .well-known endpoints for issuer configuration and\
    \ credential metadata as required by the OID4VCI specification. Provides endpoints\
    \ for OpenID Connect issuer configuration, OAuth authorization server information,\
    \ and issuer metadata describing supported verifiable credentials (IF-112)"
- name: Actuator
  description: Monitor and interact
  externalDocs:
    description: Spring Boot Actuator Web API Documentation
    url: https://docs.spring.io/spring-boot/docs/current/actuator-api/html/
paths:
  /oid4vci/api/token:
    post:
      tags:
      - Issuer OID4VCI API
      summary: Submit form data
      operationId: oauthAccessToken
      requestBody:
        description: Form data to be submitted
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/OauthAccessTokenRequest"
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OAuthToken"
  /oid4vci/api/nonce:
    post:
      tags:
      - Issuer OID4VCI API
      summary: Provide a self-contained nonce in a publicly accessible endpoint.
      description: |
        Provide nonces for proof of possessions in a manner not requiring the service to save it.
        The nonce should be used only once. The nonce has a (very) limit lifetime.
        The response should not be cached.
        For more information see <a href="https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#section-7.2">OID4VCI Nonce Endpoint specification</a>
      operationId: createNonce
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/NonceResponse"
  /oid4vci/api/deferred_credential:
    post:
      tags:
      - Issuer OID4VCI API
      summary: Collect credential associated with the bearer token and the transaction
        id. This endpoint is used for deferred issuance.
      description: Issues a credential for a deferred transaction. Requires a valid
        bearer token and transaction details in the request body.
      operationId: createDeferredCredential
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for authentication
        required: true
        schema:
          type: string
      - name: SWIYU-API-Version
        in: header
        description: "Optional API version, set to '2' for v2 requests"
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: "#/components/schemas/DeferredCredentialRequest"
              - $ref: "#/components/schemas/DeferredDataDtoV2"
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: Credential issued successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CredentialEnvelope"
        "400":
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                type: string
            application/jwt:
              schema:
                type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
            application/jwt:
              schema:
                type: string
  /oid4vci/api/credential:
    post:
      tags:
      - Issuer OID4VCI API
      summary: Collect credential associated with the bearer token with the requested
        credential properties.
      description: Issues a credential for a given bearer token and credential request.
        Supports API versioning via SWIYU-API-Version header. Returns the issued credential
        in JSON or JWT format.
      operationId: createCredential
      parameters:
      - name: Authorization
        in: header
        description: "Bearer token for authentication. Format: 'Bearer ..."
        required: true
        schema:
          type: string
      - name: SWIYU-API-Version
        in: header
        description: "Optional API version, set to '2' for v2 requests"
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: "#/components/schemas/CredentialRequest"
              - $ref: "#/components/schemas/CredentialRequestDtoV2"
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: Credential issued successfully with encryption.
          content:
            application/jwt:
              schema:
                type: string
        "202":
          description: Successful deferred credential. The credential will be issued
            later
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/DeferredData"
                - $ref: "#/components/schemas/DeferredDataDtoV2"
      security:
      - Bearer Authentication: []
  /management/api/status-list:
    post:
      tags:
      - Status List API
      summary: Create and initialize a new status list.
      description: "Initialize and link a status list slot to to this service. This\
        \ process can be only done once per status list! Status List type, configuration\
        \ or length can not be changed after initialization!"
      operationId: createStatusList
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatusListCreate"
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/StatusList"
  /management/api/credentials:
    post:
      tags:
      - Credential API
      summary: Create a generic credential offer with the given content
      description: |
        Create a new credential offer, which can the be collected by the holder.
        The returned deep link has to be provided to the holder via an other channel, for example as QR-Code.
        The credentialSubjectData can be a json object or a JWT, if the signer has been configured to perform data integrity checks.
        Returns both the ID used to interact with the offer and later issued VC, and the deep link to be provided to
      operationId: createCredential_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCredentialRequest"
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: Credential offer created
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CredentialWithDeeplinkResponse"
        "400":
          description: |
            Bad request due to user content or internal call to external service like statuslist
          content:
            '*/*':
              schema:
                type: object
  /management/api/credentials/{credentialId}:
    get:
      tags:
      - Credential API
      summary: "Get the offer data, if any is still cached"
      operationId: getCredentialInformation
      parameters:
      - name: credentialId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
        "200":
          description: Credential offer found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CredentialInfoResponseDto"
    patch:
      tags:
      - Credential API
      summary: Update the status of an offer or the verifiable credential associated
        with the id. This is only for deferred flows. The status is set to ready for
        issuance
      operationId: updateCredentialForDeferredFlow
      parameters:
      - name: credentialId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: Credential status updated
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UpdateStatusResponse"
        "400":
          description: Bad request due to user content or internal call to external
            service like statuslist
          content:
            '*/*':
              schema:
                type: object
  /management/api/credentials/{credentialId}/status:
    get:
      tags:
      - Credential API
      summary: "Get the current status of an offer or the verifiable credential, if\
        \ already issued."
      operationId: getCredentialStatus
      parameters:
      - name: credentialId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/StatusResponse"
    patch:
      tags:
      - Credential API
      summary: Set the status of an offer or the verifiable credential associated
        with the id.
      operationId: updateCredentialStatus
      parameters:
      - name: credentialId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: credentialStatus
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/UpdateCredentialStatusRequestType"
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UpdateStatusResponse"
  /oid4vci/vct/{metadataKey}:
    get:
      tags:
      - Credential Metadata API
      operationId: getCredentialTypeMetadata
      parameters:
      - name: metadataKey
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /oid4vci/oca/{ocaKey}:
    get:
      tags:
      - Credential Metadata API
      operationId: getOverlaysCaptureArchitecture
      parameters:
      - name: ocaKey
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /oid4vci/json-schema/{schemaKey}:
    get:
      tags:
      - Credential Metadata API
      operationId: getJsonSchema
      parameters:
      - name: schemaKey
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            application/schema+json:
              schema:
                type: string
  /oid4vci/.well-known/openid-credential-issuer:
    get:
      tags:
      - Well-known endpoints API
      summary: Information about credentials which can be issued.
      operationId: getIssuerMetadata
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
  /.well-known/openid-credential-issuer:
    get:
      tags:
      - Well-known endpoints API
      summary: Information about credentials which can be issued.
      operationId: getIssuerMetadata_1
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
  /.well-known/openid-configuration:
    get:
      tags:
      - Well-known endpoints API
      summary: OpenID Connect information required for issuing VCs
      operationId: getOpenIDConfiguration
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OpenIdConfiguration"
  /oid4vci/.well-known/openid-configuration:
    get:
      tags:
      - Well-known endpoints API
      summary: OpenID Connect information required for issuing VCs
      operationId: getOpenIDConfiguration_1
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OpenIdConfiguration"
  /.well-known/oauth-authorization-server:
    get:
      tags:
      - Well-known endpoints API
      summary: OpenID Connect information required for issuing VCs
      operationId: getOpenIDConfigurationForOauthAuthServer
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OpenIdConfiguration"
  /oid4vci/.well-known/oauth-authorization-server:
    get:
      tags:
      - Well-known endpoints API
      summary: OpenID Connect information required for issuing VCs
      operationId: getOpenIDConfigurationForOauthAuthServer_1
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OpenIdConfiguration"
  /management/api/status-list/{statusListId}:
    get:
      tags:
      - Status List API
      summary: Get the status information of a status list.
      operationId: getStatusListInformation
      parameters:
      - name: statusListId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/StatusList"
  /management/api/credentials/{credentialId}/offer_deeplink:
    get:
      tags:
      - Credential API
      operationId: getCredentialOfferDeeplink
      parameters:
      - name: credentialId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
      deprecated: true
  /actuator:
    get:
      tags:
      - Actuator
      summary: Actuator root web endpoint
      operationId: links
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/Link"
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/Link"
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/Link"
  /actuator/prometheus:
    get:
      tags:
      - Actuator
      summary: Actuator web endpoint 'prometheus'
      operationId: scrape
      parameters:
      - name: format
        in: query
        schema:
          type: string
          enum:
          - CONTENT_TYPE_004
          - CONTENT_TYPE_OPENMETRICS_100
          - CONTENT_TYPE_PROTOBUF
      - name: includedNames
        in: query
        schema:
          type: string
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            text/plain;version=0.0.4;charset=utf-8:
              schema:
                type: object
            application/openmetrics-text;version=1.0.0;charset=utf-8:
              schema:
                type: object
            application/vnd.google.protobuf;proto=io.prometheus.client.MetricFamily;encoding=delimited:
              schema:
                type: object
  /actuator/info:
    get:
      tags:
      - Actuator
      summary: Actuator web endpoint 'info'
      operationId: info
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actuator/health:
    get:
      tags:
      - Actuator
      summary: Actuator web endpoint 'health'
      operationId: health
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
components:
  schemas:
    OauthAccessTokenRequest:
      required:
      - grant_type
      - pre-authorized_code
      type: object
      properties:
        grant_type:
          type: string
          description: The type of grant being requested. Must be 'urn:ietf:params:oauth:grant-type:pre-authorized_code'.
          default: urn:ietf:params:oauth:grant-type:pre-authorized_code
        pre-authorized_code:
          type: string
    OAuthToken:
      required:
      - access_token
      type: object
      properties:
        refresh_token:
          type: string
        token_type:
          type: string
        scope:
          type: string
        access_token:
          type: string
        expires_in:
          type: integer
          format: int64
        c_nonce:
          type: string
    NonceResponse:
      required:
      - c_nonce
      type: object
      properties:
        c_nonce:
          type: string
          description: String containing an unpredictable challenge to be used when
            creating a proof of possession of the key.
    DeferredCredentialRequest:
      required:
      - transaction_id
      type: object
      properties:
        transaction_id:
          type: string
          description: Id received from the create credential request for the deferred
            flow.
          format: uuid
    DeferredDataDtoV2:
      required:
      - interval
      - transaction_id
      type: object
      properties:
        transaction_id:
          type: string
          format: uuid
        interval:
          type: integer
          format: int32
    CredentialEnvelope:
      type: object
      properties:
        contentType:
          type: string
        oid4vciCredentialJson:
          type: string
        httpStatus:
          type: string
          enum:
          - 100 CONTINUE
          - 101 SWITCHING_PROTOCOLS
          - 102 PROCESSING
          - 103 EARLY_HINTS
          - 103 CHECKPOINT
          - 200 OK
          - 201 CREATED
          - 202 ACCEPTED
          - 203 NON_AUTHORITATIVE_INFORMATION
          - 204 NO_CONTENT
          - 205 RESET_CONTENT
          - 206 PARTIAL_CONTENT
          - 207 MULTI_STATUS
          - 208 ALREADY_REPORTED
          - 226 IM_USED
          - 300 MULTIPLE_CHOICES
          - 301 MOVED_PERMANENTLY
          - 302 FOUND
          - 302 MOVED_TEMPORARILY
          - 303 SEE_OTHER
          - 304 NOT_MODIFIED
          - 305 USE_PROXY
          - 307 TEMPORARY_REDIRECT
          - 308 PERMANENT_REDIRECT
          - 400 BAD_REQUEST
          - 401 UNAUTHORIZED
          - 402 PAYMENT_REQUIRED
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 405 METHOD_NOT_ALLOWED
          - 406 NOT_ACCEPTABLE
          - 407 PROXY_AUTHENTICATION_REQUIRED
          - 408 REQUEST_TIMEOUT
          - 409 CONFLICT
          - 410 GONE
          - 411 LENGTH_REQUIRED
          - 412 PRECONDITION_FAILED
          - 413 PAYLOAD_TOO_LARGE
          - 413 REQUEST_ENTITY_TOO_LARGE
          - 414 URI_TOO_LONG
          - 414 REQUEST_URI_TOO_LONG
          - 415 UNSUPPORTED_MEDIA_TYPE
          - 416 REQUESTED_RANGE_NOT_SATISFIABLE
          - 417 EXPECTATION_FAILED
          - 418 I_AM_A_TEAPOT
          - 419 INSUFFICIENT_SPACE_ON_RESOURCE
          - 420 METHOD_FAILURE
          - 421 DESTINATION_LOCKED
          - 422 UNPROCESSABLE_ENTITY
          - 423 LOCKED
          - 424 FAILED_DEPENDENCY
          - 425 TOO_EARLY
          - 426 UPGRADE_REQUIRED
          - 428 PRECONDITION_REQUIRED
          - 429 TOO_MANY_REQUESTS
          - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
          - 451 UNAVAILABLE_FOR_LEGAL_REASONS
          - 500 INTERNAL_SERVER_ERROR
          - 501 NOT_IMPLEMENTED
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
          - 504 GATEWAY_TIMEOUT
          - 505 HTTP_VERSION_NOT_SUPPORTED
          - 506 VARIANT_ALSO_NEGOTIATES
          - 507 INSUFFICIENT_STORAGE
          - 508 LOOP_DETECTED
          - 509 BANDWIDTH_LIMIT_EXCEEDED
          - 510 NOT_EXTENDED
          - 511 NETWORK_AUTHENTICATION_REQUIRED
    CredentialRequest:
      required:
      - format
      type: object
      properties:
        format:
          pattern: ^vc\+sd-jwt$
          type: string
        proof:
          type: object
          additionalProperties:
            type: object
            description: Proof for holder binding. Can be in key:did or cnf format.
          description: Proof for holder binding. Can be in key:did or cnf format.
        credential_response_encryption:
          $ref: "#/components/schemas/CredentialResponseEncryption"
    CredentialResponseEncryption:
      required:
      - alg
      - enc
      - jwk
      type: object
      properties:
        jwk:
          type: object
          additionalProperties:
            type: object
        alg:
          type: string
        enc:
          type: string
      description: |
        Optional object providing information how to encrypt the Credential Response, if present.
      example: |
        {
           "alg": "ECDH-ES+A128KW",
           "enc": "A128CBC-HS256",
           "jwk": {"kty":"EC","crv":"P-256","kid":"transportEncKeyEC","x":"DTaouFJpyVkLvfhoOvuTDR6_nmTt7YTvEHsHzK0Ingk","y":"vOipfo61Sy64XpneRyR5g6NCGXLv_Q7f3-kEDMT-G9U"
        }
    CredentialRequestDtoV2:
      required:
      - credential_configuration_id
      type: object
      properties:
        credential_configuration_id:
          type: string
          description: |
            String that uniquely identifies one of the keys in the name/value pairs stored in
            the credential_configurations_supported Credential Issuer metadata
          example: university_example_sd_jwt
        proofs:
          $ref: "#/components/schemas/ProofsDto"
        credential_response_encryption:
          $ref: "#/components/schemas/CredentialResponseEncryption"
    ProofsDto:
      required:
      - jwt
      type: object
      properties:
        jwt:
          type: array
          description: |
            ProofsDto represents the proofs object in the OID4VCI Credential Request.
          example: |
            "jwt": [
               "eyJ0eXAiOiJvcGVuaWQ0dmNpLXByb29mK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6IkVDIiwidXNlIjoic2lnIiwiY3J2IjoiUC0yNTYiLCJraWQiOiJUZXN0LUtleSIsIngiOiJrdHFJRFpoUjFmY2NlM3VGanpxdDdLRVlEdVdweFJoX3pqdkszanZsS2k4IiwieSI6Ik1UV2ZObTJ6dy1CbklqM2szbW0xZVB3Q3hqTm9DSEowdXN6V25MeHVDemsiLCJpYXQiOjE3NTMyNjkyNzZ9fQ.eyJhdWQiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvb2lkNHZjaSIsIm5vbmNlIjoiY2U5YzEzNzgtODc2Yi00OGUyLTg0ZmUtOGE0ZjUwZGFkZmJmIiwiaWF0IjoxNzUzMjY5Mjc2fQ.ck-6Oq6IAav1VdFOkq9Qh7tzrl52jJvFBU3aPcZ_20oE73Cf4izN0ECmmiJm_qUMvYJlykQFsX2sW43gFC6vCw".
               "..."
            ]
          items:
            type: string
            description: |
              ProofsDto represents the proofs object in the OID4VCI Credential Request.
            example: |
              "jwt": [
                 "eyJ0eXAiOiJvcGVuaWQ0dmNpLXByb29mK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6IkVDIiwidXNlIjoic2lnIiwiY3J2IjoiUC0yNTYiLCJraWQiOiJUZXN0LUtleSIsIngiOiJrdHFJRFpoUjFmY2NlM3VGanpxdDdLRVlEdVdweFJoX3pqdkszanZsS2k4IiwieSI6Ik1UV2ZObTJ6dy1CbklqM2szbW0xZVB3Q3hqTm9DSEowdXN6V25MeHVDemsiLCJpYXQiOjE3NTMyNjkyNzZ9fQ.eyJhdWQiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvb2lkNHZjaSIsIm5vbmNlIjoiY2U5YzEzNzgtODc2Yi00OGUyLTg0ZmUtOGE0ZjUwZGFkZmJmIiwiaWF0IjoxNzUzMjY5Mjc2fQ.ck-6Oq6IAav1VdFOkq9Qh7tzrl52jJvFBU3aPcZ_20oE73Cf4izN0ECmmiJm_qUMvYJlykQFsX2sW43gFC6vCw".
                 "..."
              ]
      description: |
        Optional object providing 1+ proof of possessions of the cryptographic key material to
        which the issued Credential instances will be bound to
      example:
        jwt:
        - eyJ0eXAiOiJvcGVuaWQ0dmNpLXByb29mK2p3dCIsImFsZyI6IkVTMjU2IiwiandrIjp7Imt0eSI6IkVDIiwidXNlIjoic2lnIiwiY3J2IjoiUC0yNTYiLCJraWQiOiJUZXN0LUtleSIsIngiOiJrdHFJRFpoUjFmY2NlM3VGanpxdDdLRVlEdVdweFJoX3pqdkszanZsS2k4IiwieSI6Ik1UV2ZObTJ6dy1CbklqM2szbW0xZVB3Q3hqTm9DSEowdXN6V25MeHVDemsiLCJpYXQiOjE3NTMyNjkyNzZ9fQ.eyJhdWQiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvb2lkNHZjaSIsIm5vbmNlIjoiY2U5YzEzNzgtODc2Yi00OGUyLTg0ZmUtOGE0ZjUwZGFkZmJmIiwiaWF0IjoxNzUzMjY5Mjc2fQ.ck-6Oq6IAav1VdFOkq9Qh7tzrl52jJvFBU3aPcZ_20oE73Cf4izN0ECmmiJm_qUMvYJlykQFsX2sW43gFC6vCw
    DeferredData:
      required:
      - transaction_id
      type: object
      properties:
        transaction_id:
          type: string
          format: uuid
    StatusListCreate:
      required:
      - config
      - maxLength
      - type
      type: object
      properties:
        type:
          type: string
          description: Technical type of the status list to be used. This influences
            the options available in config.
          enum:
          - TOKEN_STATUS_LIST
        maxLength:
          minimum: 1
          type: integer
          description: How many status entries can be part of the status list. The
            memory size of the status list is depending on the type and the config
            of the status list.
          format: int32
          example: 100000
        config:
          $ref: "#/components/schemas/StatusListCreateConfig"
    StatusListCreateConfig:
      required:
      - bits
      type: object
      properties:
        purpose:
          type: string
        bits:
          type: integer
          description: "The number of bits used per Referenced Token. More bits allow\
            \ additional states. 1 bit is only revocation, 2 bits is revocation and\
            \ suspension of a credential. Possible values are 1, 2, 4, 8."
          format: int32
          example: 2
      description: |2
             Additional config parameters, depending on the status list type. For Example
             {"bits": 2}
             for token status list with revocation & suspension
             {"purpose": "suspension"}
             for a bit string status list for suspension
      example:
        bits: 2
    StatusList:
      type: object
      properties:
        id:
          type: string
          description: Id of the status list used by the business issuer.
          format: uuid
        statusRegistryUrl:
          type: string
          description: URI of the status list used by registry.
        type:
          type: string
          description: Technical type of the status list to be used. This influences
            the options available in config.
          enum:
          - TOKEN_STATUS_LIST
        maxListEntries:
          type: integer
          description: How many status entries can be part of the status list. The
            memory size of the status list is depending on the type and the config
            of the status list.
          format: int32
          example: 100000
        remainingListEntries:
          type: integer
          description: How many status entries are not used in the  status list.
          format: int32
          example: 12
        nextFreeIndex:
          type: integer
          description: Shows which is the next free status entry that can be used
          format: int32
        version:
          type: string
          description: Version of the status list schema
        config:
          type: object
          additionalProperties:
            type: object
            description: |2
                   Additional config parameters, depending on the status list type. For Example
                   {"bits": 2}
                   for token status list with revocation & suspension
                   {"purpose": "suspension"}
                   for a bit string status list for suspension
            example:
              bits: 2
          description: |2
                 Additional config parameters, depending on the status list type. For Example
                 {"bits": 2}
                 for token status list with revocation & suspension
                 {"purpose": "suspension"}
                 for a bit string status list for suspension
          example:
            bits: 2
    CredentialWithDeeplinkResponse:
      type: object
      properties:
        management_id:
          type: string
          format: uuid
        offer_deeplink:
          type: string
    CreateCredentialRequest:
      required:
      - credential_subject_data
      - metadata_credential_supported_id
      type: object
      properties:
        metadata_credential_supported_id:
          type: array
          description: ID linking the offer to the issuer metadata.
          example:
          - myIssuerMetadataCredentialSupportedId
          items:
            type: string
        credential_subject_data:
          type: object
          description: |2
                The user data to be written in the verifiable credential. Can be a json object or a JWT.
                credentialSubjectData": {"lastName": "Example","firstName": "Edward"}
                When using data integrity JWT the value are as claims inside the JWT.
                "credentialSubjectData": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsYXN0TmFtZSI6IkV4YW1wbGUiLCJmaXJzdE5hbWUiOiJFZHdhcmQiLCJkYXRlT2ZCaXJ0aCI6IjEuMS4xOTcwIn0.2VMjj1RpJ7jUjn1SJHDwwzqx3kygn88UxSsG5j1uXG8"
          example:
            lastName: Example
            firstName: Edward
        credential_metadata:
          type: object
          additionalProperties:
            type: object
            description: |
              Various metadata to be used for credential creation.
            example:
              vct#integrity: sha256-0000000000000000000000000000000000000000000=
          description: |
            Various metadata to be used for credential creation.
          example:
            vct#integrity: sha256-0000000000000000000000000000000000000000000=
        offer_validity_seconds:
          type: integer
          description: how long the offer should be usable in seconds. Example is
            1 Day.
          format: int32
          example: 86400
        credential_valid_until:
          type: string
          description: Setting for until when the VC shall be valid. XMLSchema dateTimeStamp
            https://www.w3.org/TR/xmlschema11-2/#dateTimeStamp
          format: date-time
          example: 2010-01-01T19:23:24Z
        credential_valid_from:
          type: string
          description: Setting for from when the VC shall be valid. XMLSchema dateTimeStamp
            https://www.w3.org/TR/xmlschema11-2/#dateTimeStamp
          format: date-time
          example: 2010-01-01T18:23:24Z
        status_lists:
          type: array
          description: List of URIs of the status lists to be used with the credential.
            Status Lists must be initialized. Can provide multiple status lists to
            have multiple status sources.
          example:
          - https://example-status-registry-uri/api/v1/statuslist/05d2e09f-21dc-4699-878f-89a8a2222c67.jwt
          items:
            type: string
      description: Initial credential creation request to start the offering process.
    CredentialStatusType:
      type: string
      description: |2
            Status for the full lifecycle of a verifiable credential.
            OFFERED - an offer link has been created, and not yet redeemed by a holder.
            CANCELLED - the VC was revoked before being claimed.
            IN_PROGRESS - very short lived state, if the Holder has redeemed the one-time-code, but not yet gotten their credential. To allow a holder to retry fetching the vc set the state to offered.
            DEFERRED - the offer has been used and all necessary data from the wallet has been received but the credential is not yet issued. To use this state the credential metadata entry has to have deferred set to true.
            READY - Status set by the business issuer to continue the issuance of the credential for the deferred flow.
            ISSUED - the VC has been collected by the holder and is valid.
            SUSPENDED - the VC has been temporarily suspended. To unsuspend change state to issued.
            REVOKED - the VC has been revoked. This state is final and can not be changed.
            EXPIRED - the lifetime of the VC expired (not used yet)
      example: SUSPENDED
      enum:
      - OFFERED
      - CANCELLED
      - IN_PROGRESS
      - DEFERRED
      - READY
      - ISSUED
      - SUSPENDED
      - REVOKED
      - EXPIRED
    UpdateStatusResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          $ref: "#/components/schemas/CredentialStatusType"
    UpdateCredentialStatusRequestType:
      type: string
      description: |2
            Status for the full lifecycle of a verifiable credential.
            CANCELLED - the VC was revoked before being claimed.
            READY - Status set by the business issuer to continue the issuance of the credential for the deferred flow
            SUSPENDED - the VC has been temporarily suspended. To unsuspend change state to issued.
            REVOKED - the VC has been revoked. This state is final and can not be changed.
      example: SUSPENDED
      enum:
      - CANCELLED
      - READY
      - ISSUED
      - SUSPENDED
      - REVOKED
    OpenIdConfiguration:
      type: object
      properties:
        issuer:
          type: string
        token_endpoint:
          type: string
    ClientAgentInfoDto:
      type: object
      properties:
        remoteAddr:
          type: string
        user-agent:
          type: string
        accept-language:
          type: string
        accept-encoding:
          type: string
    CredentialInfoResponseDto:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/CredentialStatusType"
        metadata_credential_supported_id:
          type: array
          items:
            type: string
        credential_metadata:
          type: object
          additionalProperties:
            type: object
        holder_jwk:
          type: string
        client_agent_info:
          $ref: "#/components/schemas/ClientAgentInfoDto"
        offer_expiration_timestamp:
          type: integer
          format: int64
        credential_valid_from:
          type: string
          format: date-time
        credential_valid_until:
          type: string
          format: date-time
        credential_request:
          $ref: "#/components/schemas/CredentialRequest"
        offer_deeplink:
          type: string
    StatusResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/CredentialStatusType"
    Link:
      type: object
      properties:
        href:
          type: string
        templated:
          type: boolean
  securitySchemes:
    Bearer Authentication:
      type: http
      scheme: bearer
      bearerFormat: JWT
